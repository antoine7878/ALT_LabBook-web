import { PrismaClient } from '@prisma/client'

interface Context {
	prisma: PrismaClient;
}

export const addGroup = async (_: any, args: { name: string }, ctx: Context) => {
	const newGroup = await ctx.prisma.group.create({
		data: {
			name: args.name || 'new group',
			img: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="50" height="50"><defs/><g transform="translate(-0.2745790934736796,-19.16668871889844) scale(0.6127170689326952,0.6127170689326952)"><g transform="translate(14.577200213382415,56.68146678988158) translate(0,0) rotate(-30.00246418410622,0,0) translate(0,0)"><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 0 0 L 30.79770559140945 0" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 4.10636074552126 4.5 L 26.69134484588819 4.5" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/></g><g transform="translate(14.577200213382415,56.68146678988158) translate(0,0) rotate(90,0,0) translate(0,0)"><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 0 0 L 30.803733086903478 0" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/></g><g transform="translate(14.577200213382415,87.48519987678506) translate(0,0) rotate(30.002464184106238,0,0) translate(0,0)"><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 0 0 L 30.79770559140946 0" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 4.106360745521261 -4.5 L 26.6913448458882 -4.5" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/></g><g transform="translate(41.24813333334831,102.88519975358506) translate(0,0) rotate(-29.998991559816698,0,0) translate(0,0)"><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 0 0 L 30.800938729178522 0" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/></g><g transform="translate(67.92279978661759,87.48519987678506) translate(0,0) rotate(-90,0,0) translate(0,0)"><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 0 0 L 30.803733086903478 0" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 4.107164411587131 -4.5 L 26.696568675316346 -4.5" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/></g><g transform="translate(41.24813333334831,41.2814669130816) translate(0,0) rotate(29.99899155981667,0,0) translate(0,0)"><path fill="none" stroke="rgb(0,0,0)" paint-order="fill stroke markers" d=" M 0 0 L 30.800938729178515 0" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" stroke-width="1.5" stroke-dasharray=""/></g></g></svg>',
			struct: '<cml xmlns="http://www.chemaxon.com" version="ChemAxon file format v20.9.0, generated by vunknown" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.chemaxon.com http://www.chemaxon.com/marvin/schema/mrvSchema_20_9_0.xsd"><MDocument><MChemicalStruct><molecule molID="m1"><atomArray><atom id="a1" elementType="C" x2="0.8124066666674152" y2="-0.8140733456540801"/><atom id="a2" elementType="C" x2="-0.5211399893308792" y2="-1.5840733394940791"/><atom id="a3" elementType="C" x2="-0.5211399893308792" y2="-3.124259993839253"/><atom id="a4" elementType="C" x2="0.8124066666674152" y2="-3.894259987679253"/><atom id="a5" elementType="C" x2="2.1461399893308797" y2="-3.124259993839253"/><atom id="a6" elementType="C" x2="2.1461399893308797" y2="-1.5840733394940791"/></atomArray><bondArray><bond id="b1" atomRefs2="a1 a2" order="2"/><bond id="b2" atomRefs2="a2 a3" order="1"/><bond id="b3" atomRefs2="a3 a4" order="2"/><bond id="b4" atomRefs2="a4 a5" order="1"/><bond id="b5" atomRefs2="a5 a6" order="2"/><bond id="b6" atomRefs2="a6 a1" order="1"/></bondArray></molecule></MChemicalStruct></MDocument></cml>',
			x: 100,
			y: 100,
			isArchived: false,
		}
	})
	return newGroup
}

export const setNameGroup = (_: any, args: { id: string, name: string }, ctx: Context) => {
	return ctx.prisma.group.update({
		where: {
			id: Number(args.id)
		},
		data: {
			name: args.name
		},
	})
}

export const setImgStructGroup = (_: any, args: { id: string, img: string, struct: string }, ctx: Context) => {
	return ctx.prisma.group.update({
		where: {
			id: Number(args.id)
		},
		data: {
			img: args.img,
			struct: args.struct,
		},
	})
}

export const setCoordsGroup = (_: any, args: { id: string, x: string, y: string }, ctx: Context) => {
	return ctx.prisma.group.update({
		where: {
			id: Number(args.id)
		},
		data: {
			x: Number(args.x),
			y: Number(args.y),
		},
	})
}

export const toggleIsArchivedGroup = async (_: any, args: { id: string }, ctx: Context) => {
	const isArchived = (await ctx.prisma.group.findOne({ where: { id: Number(args.id) } }))?.isArchived
	return ctx.prisma.group.update({
		where: {
			id: Number(args.id)
		},
		data: {
			isArchived: !isArchived
		},
	})
}

export const moveCompound = async (_: any, args: { groupIdOrignin: string, groupIdDest: string, compoundId: string, position: string }, ctx: Context) => {
	ctx.prisma.group.update({
		where: { id: Number(args.groupIdOrignin) },
		data: {
			Compound: {
				disconnect: [{ id: Number(args.compoundId) }]
			}
		}
	})
	return ctx.prisma.group.update({
		where: { id: Number(args.groupIdDest) },
		data: {
			Compound: {
				connect: [{ id: Number(args.compoundId) }]
			}
		}
	})
}

export const deleteGroup = async (_: any, args: { id: string }, ctx: Context) => {
	try {
		await ctx.prisma.group.delete({ where: { id: Number(args.id) } })
		return true
	}
	catch (e) {
		console.log(`Error while deleting group ${args.id} : `, e.meta.details)
		return false
	}
}